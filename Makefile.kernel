# QENEX Banking OS Kernel Build System
# Generates bootable ISO image for banking hardware deployment

# Build configuration
ARCH = x86_64
TARGET = x86_64-unknown-none
KERNEL_NAME = qenex-banking-kernel
ISO_NAME = qenex-banking-os.iso

# Directories
BUILD_DIR = build
ISO_DIR = $(BUILD_DIR)/iso
BOOT_DIR = $(ISO_DIR)/boot
GRUB_DIR = $(BOOT_DIR)/grub

# Tools
AS = nasm
CC = clang
LD = ld
OBJCOPY = objcopy
RUSTC = rustc
CARGO = cargo
GRUB_MKRESCUE = grub-mkrescue
QEMU = qemu-system-x86_64

# Flags for banking-grade security
ASFLAGS = -f elf64 -g
CFLAGS = -target x86_64-none-elf -ffreestanding -fno-stack-protector \
         -fno-stack-check -fno-lto -fPIE -m64 -mabi=sysv \
         -mno-80387 -mno-mmx -mno-3dnow -mno-sse -mno-sse2 \
         -mno-red-zone -mcmodel=kernel -g -O2 -Wall -Wextra \
         -DBANKING_KERNEL=1 -DSECURITY_LEVEL_MAX=1
LDFLAGS = -n -T kernel.ld --gc-sections
RUSTFLAGS = --target x86_64-unknown-none --edition 2021 \
           -C target-cpu=x86-64 -C target-feature=-mmx,-sse,+soft-float \
           -C relocation-model=static -C code-model=kernel \
           -C panic=abort -C opt-level=2 \
           --cfg banking_kernel --cfg security_level_max

# Source files
ASM_SOURCES = src/kernel/boot.s
RUST_SOURCES = src/kernel/bare_metal.rs src/bootloader/mod.rs
LINKER_SCRIPT = kernel.ld

# Object files
ASM_OBJECTS = $(patsubst src/%.s,$(BUILD_DIR)/%.o,$(ASM_SOURCES))
KERNEL_BINARY = $(BUILD_DIR)/$(KERNEL_NAME).bin
KERNEL_ELF = $(BUILD_DIR)/$(KERNEL_NAME).elf

# Default target
.PHONY: all
all: iso

# Create directories
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)
	mkdir -p $(BUILD_DIR)/kernel
	mkdir -p $(BUILD_DIR)/bootloader
	mkdir -p $(ISO_DIR)
	mkdir -p $(BOOT_DIR)
	mkdir -p $(GRUB_DIR)

# Compile assembly sources
$(BUILD_DIR)/kernel/%.o: src/kernel/%.s | $(BUILD_DIR)
	$(AS) $(ASFLAGS) $< -o $@

# Build Rust kernel
$(BUILD_DIR)/kernel_rust.o: $(RUST_SOURCES) | $(BUILD_DIR)
	$(RUSTC) $(RUSTFLAGS) --crate-type staticlib --crate-name kernel \
		src/kernel/bare_metal.rs -o $@

# Link kernel
$(KERNEL_ELF): $(ASM_OBJECTS) $(BUILD_DIR)/kernel_rust.o $(LINKER_SCRIPT) | $(BUILD_DIR)
	$(LD) $(LDFLAGS) -o $@ $(ASM_OBJECTS) $(BUILD_DIR)/kernel_rust.o

# Create kernel binary
$(KERNEL_BINARY): $(KERNEL_ELF) | $(BUILD_DIR)
	$(OBJCOPY) -O binary $< $@

# Create GRUB configuration
$(GRUB_DIR)/grub.cfg: | $(BUILD_DIR)
	echo 'set timeout=0' > $@
	echo 'set default=0' >> $@
	echo '' >> $@
	echo 'menuentry "QENEX Banking OS" {' >> $@
	echo '    multiboot2 /boot/$(KERNEL_NAME).bin' >> $@
	echo '    boot' >> $@
	echo '}' >> $@
	echo '' >> $@
	echo 'menuentry "QENEX Banking OS - Safe Mode" {' >> $@
	echo '    multiboot2 /boot/$(KERNEL_NAME).bin safe_mode=1' >> $@
	echo '    boot' >> $@
	echo '}' >> $@
	echo '' >> $@
	echo 'menuentry "QENEX Banking OS - Recovery Mode" {' >> $@
	echo '    multiboot2 /boot/$(KERNEL_NAME).bin recovery_mode=1' >> $@
	echo '    boot' >> $@
	echo '}' >> $@

# Copy kernel to ISO directory
$(BOOT_DIR)/$(KERNEL_NAME).bin: $(KERNEL_BINARY) | $(BUILD_DIR)
	cp $< $@

# Build bootable ISO
iso: $(ISO_NAME)

$(ISO_NAME): $(BOOT_DIR)/$(KERNEL_NAME).bin $(GRUB_DIR)/grub.cfg
	$(GRUB_MKRESCUE) -o $@ $(ISO_DIR)
	@echo "Bootable ISO created: $(ISO_NAME)"
	@echo "Banking OS ready for deployment to production hardware"

# Test in QEMU with banking hardware emulation
.PHONY: test
test: $(ISO_NAME)
	$(QEMU) -cdrom $(ISO_NAME) -m 1G -smp 2 \
		-device tpm-tis,tpmdev=tpm0 -tpmdev emulator,id=tpm0,chardev=chrtpm \
		-chardev socket,id=chrtpm,path=/tmp/swtpm-sock \
		-netdev user,id=net0 -device rtl8139,netdev=net0 \
		-monitor stdio -serial file:banking-os.log

# Test with KVM acceleration for performance testing
.PHONY: test-kvm
test-kvm: $(ISO_NAME)
	$(QEMU) -enable-kvm -cdrom $(ISO_NAME) -m 4G -smp 4 \
		-device tpm-tis,tpmdev=tpm0 -tpmdev emulator,id=tpm0,chardev=chrtpm \
		-chardev socket,id=chrtpm,path=/tmp/swtpm-sock \
		-netdev user,id=net0 -device e1000,netdev=net0 \
		-monitor stdio -serial file:banking-os-kvm.log

# Debug kernel with GDB
.PHONY: debug
debug: $(ISO_NAME)
	$(QEMU) -cdrom $(ISO_NAME) -m 1G -s -S &
	gdb -ex "target remote localhost:1234" -ex "symbol-file $(KERNEL_ELF)"

# Security analysis of kernel binary
.PHONY: security-check
security-check: $(KERNEL_ELF)
	@echo "Performing security analysis of banking kernel..."
	objdump -h $(KERNEL_ELF) | grep -E "(LOAD|EXEC|WRITE)"
	objdump -t $(KERNEL_ELF) | grep -E "(security|banking|crypto)"
	readelf -l $(KERNEL_ELF) | grep -E "(STACK|HEAP|DATA)"
	@echo "Security analysis complete."

# Memory layout analysis
.PHONY: memory-layout
memory-layout: $(KERNEL_ELF)
	@echo "Banking kernel memory layout:"
	objdump -h $(KERNEL_ELF)
	nm $(KERNEL_ELF) | grep -E "__.*_(start|end)" | sort

# Banking certification build (extra security checks)
.PHONY: banking-cert
banking-cert: CFLAGS += -DBANKING_CERTIFICATION=1 -fstack-protector-strong
banking-cert: RUSTFLAGS += --cfg banking_certification
banking-cert: $(ISO_NAME)
	@echo "Banking certification build complete."
	@echo "Additional security measures enabled."

# Clean build artifacts
.PHONY: clean
clean:
	rm -rf $(BUILD_DIR)
	rm -f $(ISO_NAME)
	rm -f banking-os*.log

# Install to production banking server
.PHONY: install-production
install-production: $(ISO_NAME)
	@echo "WARNING: Installing to production banking hardware"
	@echo "Ensure all security protocols are followed"
	@read -p "Confirm production deployment [yes/NO]: " confirm; \
	if [ "$$confirm" = "yes" ]; then \
		echo "Deploying $(ISO_NAME) to production banking server..."; \
		dd if=$(ISO_NAME) of=/dev/sdb bs=4M status=progress; \
		sync; \
		echo "Production deployment complete."; \
	else \
		echo "Production deployment cancelled."; \
	fi

# Help target
.PHONY: help
help:
	@echo "QENEX Banking OS Build System"
	@echo "============================="
	@echo ""
	@echo "Targets:"
	@echo "  all              - Build bootable ISO (default)"
	@echo "  iso              - Build bootable ISO image"
	@echo "  test             - Test in QEMU with banking hardware"
	@echo "  test-kvm         - Test with KVM acceleration"
	@echo "  debug            - Debug kernel with GDB"
	@echo "  security-check   - Perform security analysis"
	@echo "  memory-layout    - Show memory layout"
	@echo "  banking-cert     - Build with certification flags"
	@echo "  install-production - Deploy to production hardware"
	@echo "  clean            - Remove build artifacts"
	@echo "  help             - Show this help"
	@echo ""
	@echo "Banking OS Security Features:"
	@echo "  - Secure boot with hardware verification"
	@echo "  - TPM 2.0 integration"
	@echo "  - Hardware Security Module support"
	@echo "  - Memory protection and isolation"
	@echo "  - Real-time transaction processing"
	@echo "  - Quantum-resistant cryptography"