version: '3.9'

services:
  # Main QENEX Banking Node 1 (Leader)
  qenex-node-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qenex-banking-node-1
    restart: unless-stopped
    environment:
      - NODE_ID=1
      - NODE_ROLE=leader
      - DATABASE_URL=postgresql://qenex:${DB_PASSWORD}@postgres:5432/qenex_banking
      - REDIS_URL=redis://redis:6379
      - CLUSTER_PEERS=qenex-node-2:8080,qenex-node-3:8080
      - LOG_LEVEL=info
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8080:8080"
      - "9090:9090"  # Prometheus metrics
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data/node1:/app/data
      - ./logs:/app/logs
    networks:
      - qenex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banking Node 2 (Follower)
  qenex-node-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qenex-banking-node-2
    restart: unless-stopped
    environment:
      - NODE_ID=2
      - NODE_ROLE=follower
      - DATABASE_URL=postgresql://qenex:${DB_PASSWORD}@postgres:5432/qenex_banking
      - REDIS_URL=redis://redis:6379
      - CLUSTER_PEERS=qenex-node-1:8080,qenex-node-3:8080
      - LOG_LEVEL=info
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8081:8080"
      - "9091:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data/node2:/app/data
      - ./logs:/app/logs
    networks:
      - qenex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banking Node 3 (Follower)
  qenex-node-3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qenex-banking-node-3
    restart: unless-stopped
    environment:
      - NODE_ID=3
      - NODE_ROLE=follower
      - DATABASE_URL=postgresql://qenex:${DB_PASSWORD}@postgres:5432/qenex_banking
      - REDIS_URL=redis://redis:6379
      - CLUSTER_PEERS=qenex-node-1:8080,qenex-node-2:8080
      - LOG_LEVEL=info
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8082:8080"
      - "9092:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./data/node3:/app/data
      - ./logs:/app/logs
    networks:
      - qenex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qenex-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=qenex_banking
      - POSTGRES_USER=qenex
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qenex -d qenex_banking"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qenex_network
    command: postgres -c max_connections=200 -c shared_buffers=256MB -c effective_cache_size=1GB

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: qenex-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qenex_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: qenex-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - qenex_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: qenex-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - qenex_network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: qenex-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - qenex_network

  # Backup service
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: qenex-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - app_data:/app/data:ro
      - postgres_data:/var/lib/postgresql/data:ro
      - backup_data:/backups
    networks:
      - qenex_network

networks:
  qenex_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  app_data:
  app_logs:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  nginx_cache:
  backup_data: